<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="7a010f36-6ba2-465f-85cd-90e23781a0ec" activeEnvironment="Default" name="ASSISTANCE" resourceRoot="" soapui-version="5.6.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="7a531625-4acc-431a-9992-35ab6aa2c1b3" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://test.api.coronadirect.be" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://${#Project#BaseURL}</con:endpoint><con:endpoint>https://test.api.coronadirect.be</con:endpoint></con:endpoints><con:resource name="quote" path="/external/assistance/insurance/v1/quote" id="1a2c436e-7bca-4108-83f1-b158e70edd04"><con:settings/><con:parameters/><con:method name="Method 1" id="dbe7cb1d-13ce-4a09-a898-b91822a11ed3" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Quote Assistance" id="53292f9e-1740-457e-8cf1-7507661abda4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://test.api.coronadirect.be</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="9b9cae2c-5a27-40c2-bc4e-72cca68560da" name="QuoteAssistance"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="0e4d55e6-262c-4eb0-9128-b37d5c7eb2e6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="QUOTE" searchProperties="true"><con:settings/><con:testStep type="groovy" name="LoadTestData" id="505aa7af-1927-48fd-bc74-0709bbaa6a7e"><con:settings/><con:config><script>import org.apache.poi.ss.usermodel.*
import org.apache.poi.hssf.usermodel.*
import org.apache.poi.ss.util.*
import groovy.json.JsonSlurper


//Global variables
def stopAtLine = 1  //0 = run all
date = new Date().format( 'yyyyMMdd' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
projectPath = groovyUtils.projectPath
log.info "Detected project path: " + projectPath
//projectPath = "D:\\a\\1\\s";
def variables = testRunner.testCase.getTestStepByName("Variables")
def fail = false
errorLog = []



//Initiate external Functions.groovy
GroovyScriptEngine gse = new GroovyScriptEngine(projectPath)
externalScript = gse.loadScriptByName("Functions.groovy")  
Functions = externalScript.newInstance(context: context, log: log, testRunner: testRunner)
Functions.printCall()

	
// Initiate EXCEL
def inputStream = new FileInputStream(projectPath+"\\TestCases-Assistance-Quote.xls");
HSSFWorkbook wb = new HSSFWorkbook(inputStream);
HSSFSheet ws = wb.getSheet("TestCases")  
def totalRows = ws.getPhysicalNumberOfRows()
def totalColumns = ws.getRow(0).getPhysicalNumberOfCells()

// Initiate LOG dirs
Functions.checkAndCreateFolder("Requests", projectPath, date)
Functions.checkAndCreateFolder("Fails", projectPath, date)


// Iterate rows / TESTCASES
for(def i=1; i&lt;totalRows; i++){
	// Reset variables
	def request = ""
	def response = ""
	errorLog.clear()
	fail = false
	def row = ws.getRow(i)
	
	//Populate variables with data from excel
	for (var in variables.getPropertyList()){
		Cell cell = row.getCell(Functions.getColumn(var.getName(), ws, totalColumns))
		//log.info Functions.getCellValue(cell)
		
		//the variable name is extracted from property list. Then, correct column is selected using the function 'getColumn()
		variables.setPropertyValue(var.getName(),Functions.getCellValue(cell).toString())
	 }

	//API call .run()
	testRunner.runTestStepByName("Quote")

	//REQUEST being send
	request = context.expand( '${Quote#RawRequest}' )
	log.info request
	
	//Create requestLog
	def requestLog = new File(projectPath + "\\Requests\\" + date + "\\row " + (i+1) +".txt");
	requestLog.write (request);


	// -- RESPONSE --

	def httpResponseHeaders = context.testCase.testSteps["Quote"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

	
		//if JSON is not correct, statusCode will be 500
	if (httpStatusCode != "500"){
		response = context.expand( '${Quote#Response}' )
		def jsonSlurper = new JsonSlurper()
		def object = jsonSlurper.parseText(response)
		
	// -- ASSERTIONS --
	
			//Check if server accepted the request, or if the returnCode is as expected
		try {
	 		assert object[0].control.applicationReturnCode == variables.getPropertyValue("returnCode")
		}
		catch (AssertionError e) {
			fail = true
			errorLog.addAll(Functions.createErrorLogText("ApplicationReturnCode not "+ variables.getPropertyValue("returnCode")+" \n" + "errorMessage: " + object[0].control.errorMessage ,variables.getPropertyValue("returnCode"),object[0].control.applicationReturnCode))
		}
			//only if the returnCode is 00000, the following assertions can be done
		if (object[0].control.applicationReturnCode == '00000'){
			
				//Check if premium CAR is as expected
			try {
		 		assert Functions.checkValues(object[0].results.premiumCar.toString(), variables.getPropertyValue("premiumCar"))
			}
			catch (AssertionError e) {
				fail = true
				errorLog.addAll(Functions.createErrorLogText("premium CAR FAIL",variables.getPropertyValue("premiumCar"),object[0].results.premiumCar))
			}	
			
				//Check if premium Motor is as expected
			try {
		 		assert Functions.checkValues(object[0].results.premiumMotor.toString(), variables.getPropertyValue("premiumMotor"))
			}
			catch (AssertionError e) {
				fail = true
				errorLog.addAll(Functions.createErrorLogText("premium Motor FAIL",variables.getPropertyValue("premiumMotor"),object[0].results.premiumMotor))
			}	
			
				//Check if premium Bicycle is as expected
			try {
		 		assert Functions.checkValues(object[0].results.premiumBicycle.toString(), variables.getPropertyValue("premiumBicycle"))
			}
			catch (AssertionError e) {
				fail = true
				errorLog.addAll(Functions.createErrorLogText("premium Bicycle FAIL",variables.getPropertyValue("premiumBicycle"),object[0].results.premiumBicycle))
			}	
			
				//Check if premium Personal Assistance is as expected
			try {
		 		assert Functions.checkValues(object[0].results.premiumPersonalAssistance.toString(), variables.getPropertyValue("premiumPersonalAssistance"))
			}
			catch (AssertionError e) {
				fail = true
				errorLog.addAll(Functions.createErrorLogText("premium Personal Assistance FAIL",variables.getPropertyValue("premiumPersonalAssistance"),object[0].results.premiumPersonalAssistance))
			}	
				//Check if premium Luggage is as expected
			try {
		 		assert Functions.checkValues(object[0].results.premiumLuggage.toString(), variables.getPropertyValue("premiumLuggage"))
			}
			catch (AssertionError e) {
				fail = true
				errorLog.addAll(Functions.createErrorLogText("premium Luggage FAIL",variables.getPropertyValue("premiumLuggage"),object[0].results.premiumLuggage))
			}	

				//Check if premium Total is as expected
			try {
		 		assert Functions.checkValues(object[0].results.premiumTotal.toString(), variables.getPropertyValue("premiumTotal"))
			}
			catch (AssertionError e) {
				fail = true
				errorLog.addAll(Functions.createErrorLogText("premium Total FAIL",variables.getPropertyValue("premiumTotal"),object[0].results.premiumTotal))
			}

				//Check if premium Total Incl Discount is as expected
			try {
		 		assert Functions.checkValues(object[0].results.premiumTotalInclDiscount.toString(), variables.getPropertyValue("premiumTotalInclDiscount"))
			}
			catch (AssertionError e) {
				fail = true
				errorLog.addAll(Functions.createErrorLogText("premium Total Incl Discount FAIL",variables.getPropertyValue("premiumTotalInclDiscount"),object[0].results.premiumTotalInclDiscount))
			}
		}
	}
	// When httpStatusCode == 500:
	else{ 
		fail = true
		errorLog &lt;&lt; "JSON error"
		errorLog &lt;&lt; httpStatus
	}
		
	//Create and write Logs
	if (fail){
		log.error "  Row " + (i+1) + " - FAIL"
		Functions.writeListAsLinesToLog(errorLog, i, projectPath, date);
		row.createCell(0).setCellValue("FAIL");
	}
	else{
		log.info "  Row " + (i+1) + " - PASS"
		row.createCell(0).setCellValue("PASS");
	}

	//stop loop
	if(i == stopAtLine){
		break;
	}
}

//Save file
Functions.saveFile("TestCases-Assistance-Quote", projectPath, wb);




</script></con:config></con:testStep><con:testStep type="restrequest" name="Quote" id="a6d43049-bba6-4032-af72-4c79c4e3315f"><con:settings/><con:config service="https://test.api.coronadirect.be" resourcePath="/external/assistance/insurance/v1/quote" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Quote" id="53292f9e-1740-457e-8cf1-7507661abda4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Ocp-Apim-Subscription-Key" value="8cd7290f9eab496880f72d1009a1c164" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://test.api.coronadirect.be</con:endpoint><con:request>[{
    "requester": {
        "organizationIdentifier": "CORONA",
        "transactionIdentifier": "abcdef123456789",
        "coronaTransactionIdentifier": "abcdef123456789",
        "digitalSigning": ${Variables#digitalSigning}
    },
    "contract": {
        "packageType": "${Variables#packageType}",
        "numberOfCars": ${Variables#numberOfCars},
        "numberOfMotors": ${Variables#numberOfMotors},
        "numberOfBicyclesAndOthers": ${Variables#numberOfBicyclesAndOthers},
        "numberOfFamilyMembers": ${Variables#numberOfFamilyMembers},
        "personalAssistance": ${Variables#personalAssistance},
        "luggage": ${Variables#luggage},
        "policyReference": "3001004514",
        "propositionDate": "2021-12-01",
        "contractEffectiveDateKnown": false,
        "contractEffectiveDate": "2021-12-01",
        "payment": {
            "frequencyCode": ${Variables#frequencyCode}
        }
    }
}]
</con:request><con:originalUri>https://test.api.coronadirect.be/external/assistance/insurance/v1/quote</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="Variables" id="05c99922-55ce-48e2-8ccc-c9494defd463"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>digitalSigning</con:name><con:value>LEEG</con:value></con:property><con:property><con:name>numberOfCars</con:name><con:value>1.0</con:value></con:property><con:property><con:name>numberOfMotors</con:name><con:value>1.0</con:value></con:property><con:property><con:name>numberOfBicyclesAndOthers</con:name><con:value>0.0</con:value></con:property><con:property><con:name>numberOfFamilyMembers</con:name><con:value>0.0</con:value></con:property><con:property><con:name>personalAssistance</con:name><con:value>true</con:value></con:property><con:property><con:name>luggage</con:name><con:value>true</con:value></con:property><con:property><con:name>frequencyCode</con:name><con:value>1</con:value></con:property><con:property><con:name>packageType</con:name><con:value>EU</con:value></con:property><con:property><con:name>returnCode</con:name><con:value>00000</con:value></con:property><con:property><con:name>premiumCar</con:name><con:value>85.0</con:value></con:property><con:property><con:name>premiumMotor</con:name><con:value>85.0</con:value></con:property><con:property><con:name>premiumBicycle</con:name><con:value>0.0</con:value></con:property><con:property><con:name>premiumPersonalAssistance</con:name><con:value>50.0</con:value></con:property><con:property><con:name>premiumLuggage</con:name><con:value>35.0</con:value></con:property><con:property><con:name>premiumTotal</con:name><con:value>255.0</con:value></con:property><con:property><con:name>premiumTotalInclDiscount</con:name><con:value>204.0</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>